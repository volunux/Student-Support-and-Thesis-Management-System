{"version":3,"sources":["./src/app/shared/services/password-validators.service.ts","./src/app/authentication/authentication-route-data.ts","./src/app/authentication/authentication-form.service.ts","./src/app/authentication/authentication.module.ts","./src/app/authentication/general.ts","./src/app/authentication/authentication-routing.module.ts","./src/app/authentication/forgot-password/forgot-password.component.ts","./src/app/authentication/forgot-password/forgot-password.component.html","./src/app/authentication/reset-password/reset-password.component.ts","./src/app/authentication/reset-password/reset-password.component.html"],"names":[],"mappings":"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","file":"authentication-authentication-module.js","sourcesContent":["import { AbstractControl , FormGroup , ValidatorFn , ValidationErrors } from '@angular/forms';\n\nexport function simplePasswordValidator() : ValidatorFn {\n\n  return (control : AbstractControl) : ValidationErrors | null => {\n    \n    let passwordList = ['123456789' , '1234567890' , '12345' , 'abcdef'];\n\n    let entry = '' + control.value;\n\n    let passwordValid = passwordList.indexOf(entry);\n\n    return passwordValid > -1 ? {'simplePassword' : {'value' : control.value} } : null\n  \n  }\n\n}\n\nexport function confirmPasswordValidator() {\n\n return (group : FormGroup) : ValidationErrors | null => {\n\n    let password = group.get('new_password') ? group.get('new_password').value : null;\n\n    let cPassword = group.get('confirm_password') ? group.get('confirm_password') : null;\n\n    if (!password) password = group.get('password') ? group.get('password').value : null;\n\n    if (cPassword) { cPassword.value != password ? cPassword.setErrors({'confirm_password' : true , 'required' : true , 'minLength' : true , 'maxLength' : true}) : cPassword.setErrors(null); \n\n    return null;\n\n      }\n  \n  }\n\n}\n\n\nexport function currentAndNewPasswordValidator() {\n\n return (group : FormGroup) : ValidationErrors | null => {\n\n    let password = group.get('new_password') ? group.get('new_password').value : null;\n\n    let newPassword = group.get('new_password') ? group.get('new_password') : null;\n\n    if (!password) password = group.get('password') ? group.get('password').value : null;\n\n    if (newPassword) { newPassword.value == password ? newPassword.setErrors({'currentAndNew' : true , 'required' : true , 'minLength' : true , 'maxLength' : true}) : newPassword.setErrors(null); \n\n    return null;\n\n      }\n  \n  }\n\n}","let $$ : { [key : string] : any } = {\r\n\r\n\t\t'systemType' : 'User' ,\r\n\r\n\t\t'title' : 'User' ,\r\n\r\n\t\t'view' : 'gen-internal' ,\r\n\r\n\t\t'viewWord' : 'User' ,\r\n\r\n\t\t'link' : 'user' ,\r\n\r\n\t\t'$link' : 'authentication' ,\r\n\r\n\t\t'systemGuideline' : 'gen-internal'\r\n};\r\n\r\nlet searchFilters = { 'role' : 'Role' , 'emailAddress' : 'Email Address' , 'level' : 'Level' , 'identityNumber' : 'Identity Number' , 'status' : 'Status' };\r\n\r\nlet signIncontrolFilters : string[] = ['firstName' , 'lastName' , 'username' , 'about' , 'department' , 'role' , 'faculty' , 'level' , 'country' , 'unit' , 'matriculationNumber' , \r\n\r\n\t\t\t\t\t\t\t\t'jambRegistrationNumber' , 'identityNumber' , 'confirmPassword' , 'status'];\r\n\r\nexport const AData : { [key : string] : any } = {\r\n\r\n\t'dashboard' : {...$$} ,\r\n\r\n\t'signUp' : {...$$ , 'title' : `Request for a User Account` , 'view' : 'ca' , 'controlFilters' : ['country' , 'role' , 'status'] , 'noEdit' : false } ,\r\n\r\n\t'signIn' : {...$$ , 'title' : `Sign into User Account` , 'view' : 'ca' , 'controlFilters' : signIncontrolFilters , 'asyncValidators' : ['emailAddress' , 'username'] , 'noEdit' : false } ,\r\n\r\n\t'forgotPassword' : {...$$ , 'title' : `Recover User Account` , 'view' : 'up' , 'noEdit' : false } ,\r\n\r\n\t'resetPassword' : {...$$ , 'title' : `Reset User Password` , 'view' : 'up' , 'noEdit' : false } ,\r\n\r\n};","import { Injectable , Inject } from '@angular/core';\r\nimport { Validators , ValidatorFn , FormBuilder , FormGroup , FormControl } from '@angular/forms';\r\nimport { General } from './general';\r\nimport { simplePasswordValidator , confirmPasswordValidator } from '../shared/services/password-validators.service';\r\n\r\n@Injectable()\r\n\r\nexport class AuthenticationFormService {\r\n\r\n  constructor(public fb : FormBuilder ) { \r\n\r\n  }\r\n\r\n  public permanentData : any = {};\r\n\r\n  public entryValidators : { [key : string] : ValidatorFn[] } = {\r\n\r\n    'password' : [Validators.required , Validators.minLength(7) , Validators.maxLength(35) , simplePasswordValidator()] ,\r\n\r\n  }\r\n\r\n  public resetPassword() : FormGroup {\r\n\r\n    let form : FormGroup = new FormGroup({\r\n\r\n    'new_password' : new FormControl('' , this.entryValidators.password) ,\r\n\r\n    'confirm_password' : new FormControl('' , this.entryValidators.password)\r\n\r\n    } , [confirmPasswordValidator() ]);\r\n\r\n    return form;\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { GeneralModule } from '../general/general.module';\nimport { GeneralServicesModule } from '../shared/services/general-services.module';\n\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\n\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nimport { ErrorMessagesService1 } from './error-messages.service1';\nimport { AuthenticationFormService } from './authentication-form.service';\n\n@NgModule({\n\n  declarations: [\n\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ],\n\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    GeneralModule,\n    GeneralServicesModule,\n    AuthenticationRoutingModule\n  ],\n\n  providers : [\n\n    ErrorMessagesService1,\n    AuthenticationFormService\n  ]\n\n})\n\nexport class AuthenticationModule { \n\n}\n","export interface General {\r\n\r\n\t[key : string] : any;\r\n\r\n\ts_id? : any;\r\n\r\n\ttoken? : any;\r\n\r\n}\r\n\r\nexport const forbiddenNames : RegExp = /moderator|administrator|superAdministrator|hod|deanstudent|departmentPresident|facultyPresident|bursar|lecturer|staff/i;\r\n\r\nexport const emailAddress : RegExp = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { HaveLoggedInGuard } from '../shared/guards/have-logged-in.guard';\n\nimport { AData } from './authentication-route-data';\n\nconst routes : Routes = [\n\n\t{'path' : 'forgot-password' , 'component' : ForgotPasswordComponent , 'data' : {'forgotPassword' : AData.forgotPassword } } ,\n\n\t{'path' : 'reset-password/:token' , 'component' : ResetPasswordComponent ,'data' : {'resetPassword' : AData.resetPassword } } ,\n\n];\n\n@NgModule({\n\n  imports: [RouterModule.forChild(routes)],\n  \n  exports: [RouterModule]\n\n})\n\nexport class AuthenticationRoutingModule { \n\n}\n","import { Component , OnInit } from '@angular/core';\nimport { FormControl , FormGroup , FormBuilder , Validators } from '@angular/forms';\nimport { ActivatedRoute , Router } from '@angular/router';\nimport { User } from '../user';\nimport { General , emailAddress } from '../general';\nimport { AuthenticationService } from '../authentication.service';\nimport { DataService } from '../data.service';\nimport { emailAddressValidator } from '../../shared/services/form-validators.service';\nimport { fadeAnimation } from '../../animations';\nimport { ErrorMessagesService1 } from '../error-messages.service1';\nimport { NotificationService } from '../../shared/services/notification.service';\n\n@Component({\n\n  'selector' : 'app-forgot-password',\n\n  'templateUrl' : './forgot-password.component.html',\n\n  'styleUrls' : ['./forgot-password.component.css'] ,\n\n  'providers' : [NotificationService , ErrorMessagesService1] ,\n\n  'animations' : [fadeAnimation]\n\n})\n\nexport class ForgotPasswordComponent implements OnInit {\n\n  constructor(private router : Router , private route : ActivatedRoute , private ds : DataService , private auth : AuthenticationService ,\n\n              private fb : FormBuilder , private ns : NotificationService , private ems : ErrorMessagesService1) { \n\n  }\n\n  public description : string = `All members of the system are will be able to recover their account if they have an email address registered in the system.`;\n\n  public systemType : string;\n\n  public viewWord : string;\n\n  public systemGuideline : string; \n\n  public title : string;\n\n  public view : string;\n\n  public link : string;\n\n  public error : General;\n\n  public isError : boolean = false\n\n  public isFormSubmitted : boolean = false\n\n  public isFormProcessing : boolean = false\n\n  public changesSuccess : boolean;\n\n  public entryForm : FormGroup;\n\n  public entryChangesT : any;\n\n  ngOnInit() : void {\n\n    this.entryForm = this.fb.group({ \n\n      'email_address' : ['' , {'validators' : [Validators.required , Validators.minLength(7) , Validators.maxLength(50) , emailAddressValidator(emailAddress) ] } ] });\n\n    let data = this.route.snapshot.data;\n\n    this.systemType = data.forgotPassword.systemType;\n\n    this.viewWord = data.forgotPassword.viewWord;\n\n    this.systemGuideline = data.forgotPassword.systemGuideline;\n\n    this.title = data.forgotPassword.title;\n\n    this.view = data.forgotPassword.view;\n\n    this.link = data.forgotPassword.link;\n\n    this.ds.$systemType = this.systemType;\n  \n  }\n \n  public confirmEntry(body : General) : any {\n\n    this.isFormSubmitted = true;\n\n    this.error = null;\n\n    this.isError = false;\n\n    this.isFormProcessing = true;\n\n    this.ds.forgotPassword$(body)\n\n      .subscribe((result : General) => {\n\n        if (result == null) { \n\n          this.isFormSubmitted = false;\n\n          this.isFormProcessing = false;\n\n          this.ns.setNotificationStatus(true);\n\n          this.ns.addNotification(`Operation is unsuccessful and ${this.systemType} is not updated.`);\n\n          this.error = Object.assign({'resource' : `${this.systemType} Entry`} , this.ems.message); \n\n          this.isError = true; }\n\n         else if (result != null) {\n\n           this.isFormSubmitted = false;\n\n           this.changesSuccess = true;\n\n           this.ns.setNotificationStatus(true);\n\n           this.ns.addNotification(`Operation is successful and ${this.systemType} entry is updated.`);\n\n           this.entryChanges(result); } });\n\n  }\n\n  public entryChanges(data) : void {\n\n    this.entryChangesT = setTimeout(() => {\n\n      return this.router.navigateByUrl('/'); } , 30000) \n  }\n\n get email_address() : FormControl {\n\n    return this.entryForm.get('email_address') as FormControl;\n  }\n\n  get isFormValid() : boolean {\n\n    return this.entryForm.valid;\n  }\n\n  get notificationAvailable() : boolean {\n\n    return this.ns.notificationStatus();\n  }\n\n  get notificationMessage() : string {\n\n    return this.ns.getNotificationMessage();\n  }\n\n  public removeNotification() : void {\n\n    this.ns.removeNotification();\n  }\n\n}\n","<div id ='entry-create'>\n\n\t<h2 *ngIf ='title'> {{title}} </h2>\n\n\t<div *ngIf ='description' class ='description'> <p> {{description}} </p> </div>\n\n<app-view-description *ngIf ='view' [view-type] ='view'> </app-view-description>\n\n<app-notification-screen *ngIf ='notificationAvailable' [notified] ='notificationAvailable' [message] ='notificationMessage' (finished) ='removeNotification()'></app-notification-screen>\n\n<app-resource-unavailable *ngIf ='isError' [error] ='error' > </app-resource-unavailable>\n\n\t<ng-container *ngIf ='changesSuccess'>\n\n\t\t<p> <b class ='bold'> Note : </b> A reset password message have been sent to your email address. Kindly check your inbox or spam so that you can sign in and recover the account by choosing a password. Do not\n\n\t\t share what reset token code is sent to you with anyone </p>\n\n\t</ng-container>\n\n\t\t<form *ngIf ='!changesSuccess' method ='post' [formGroup] ='entryForm' (ngSubmit) ='confirmEntry(entryForm.value)'>\n\n\t\t\t<div class ='form-group'>\n\n\t\t\t\t<label for ='email_address' class ='form-label bold'> Email Address * : </label>\n\n\t\t\t\t<input type ='text' id ='email_address' name ='email_address' placeholder ='david@example.com' required ='required' formControlName ='email_address' class ='form-control'>\n\n\t\t<ng-container *ngIf ='email_address'>\n\n\t\t\t<div @fadeAnimation *ngIf ='email_address.invalid && (email_address.touched || email_address.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='email_address.errors?.required'> Email Address of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.minlength'> Email Address of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.maxlength'> Email Address of {{systemType}} cannot be greater than 50 characters in length </li>\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.email_address'> Email Address must be valid and should conform to standards for example david@gmail.com </li>\n\n\t\t</ul>\n\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t\t\t</div>\n\n\t\t\t<button *ngIf ='!isFormProcessing' type ='submit' class ='btn-submit' [class] ='{\"disabled\" : !isFormValid }' [disabled] ='!isFormValid' > Submit </button> \n\n\t\t\t<p *ngIf ='isFormSubmitted'> Your form is being processed. Please kindly be patient and wait while it completes. </p>\n\n\t\t</form>\n\n\t</div>","import { Component , OnInit } from '@angular/core';\nimport { ActivatedRoute , Router , ParamMap } from '@angular/router';\nimport { FormGroup , FormControl } from '@angular/forms';\nimport { switchMap } from 'rxjs/operators';\nimport { User } from '../user';\nimport { General } from '../general';\nimport { DataService } from '../data.service';\nimport { AuthenticationService } from '../authentication.service';\nimport { AuthenticationFormService } from '../authentication-form.service';\nimport { ErrorMessagesService1 } from '../error-messages.service1';\nimport { NotificationService } from '../../shared/services/notification.service';\n\n@Component({\n\n  'selector' : 'app-reset-password',\n\n  'templateUrl' : './reset-password.component.html',\n\n  'styleUrls' : ['./reset-password.component.css'] ,\n\n  'providers' : [NotificationService , ErrorMessagesService1]\n\n})\nexport class ResetPasswordComponent implements OnInit {\n\n\n  constructor(private afs : AuthenticationFormService , private router : Router , private ds : DataService , private auth : AuthenticationService ,\n\n              private ns : NotificationService , private route : ActivatedRoute , private ems : ErrorMessagesService1) { \n\n  }\n\n  public systemType : string;\n\n  public viewWord : string;\n\n  public systemGuideline : string; \n\n  public title : string;\n\n  public view : string;\n\n  public link : string;\n\n  public $link : string;\n\n  public noEdit : boolean;\n\n  public error : General;\n\n  public isError : boolean = false\n\n  public isFormSubmitted : boolean = false;\n\n  public isFormProcessing : boolean = false\n\n  public passwordToken : string;\n\n  public changesSuccess : boolean;\n\n  public entryForm : FormGroup;\n\n  public entryChangesT : any;\n\n  ngOnInit() : void {\n\n    let data = this.route.snapshot.data;\n\n    this.systemType = data.resetPassword.systemType;\n\n    this.viewWord = data.resetPassword.viewWord;\n\n    this.systemGuideline = data.resetPassword.systemGuideline;\n\n    this.title = data.resetPassword.title;\n\n    this.view = data.resetPassword.view;\n\n    this.link = data.resetPassword.link;\n\n    this.$link = data.resetPassword.$link;\n\n    this.noEdit = data.resetPassword.noEdit;\n\n    this.ds.$systemType = this.systemType;\n\n    this.route.paramMap\n\n      .pipe(\n\n          switchMap((params : ParamMap) => {\n\n          let $e = params.get('token');\n\n          this.passwordToken = $e;\n\n           return this.ds.resetPassword($e); }) )\n\n      .subscribe((result : General) => {\n\n          if (result == null) { \n\n            this.error = Object.assign({'resource' : `${this.systemType} Entry`} , this.ems.message); \n\n            this.isError = true; }\n\n          else if (result != null) {\n\n            this.entryForm = this.afs.resetPassword(); } });\n\n  }\n\n  public $resetPassword(body : General) {\n\n    this.isFormSubmitted = true;\n\n    this.error = null;\n\n    this.isError = false;\n\n    this.isFormProcessing = true;\n\n    this.ds.resetPassword$(this.passwordToken , body)\n\n      .subscribe((result : General) => {\n\n        if (result == null) {\n\n          this.isFormSubmitted = false;\n\n          this.isFormProcessing = false;\n\n          this.ns.setNotificationStatus(true);\n\n          this.ns.addNotification(`Operation is unsuccessful and ${this.systemType} is not logged in.`);\n\n          this.error = Object.assign({'resource' : `${this.systemType} Entry`} , this.ems.message); \n\n          this.isError = true; }\n\n         else if (result != null) { this.isFormSubmitted = false;\n\n          this.changesSuccess = true;\n\n          this.ns.setNotificationStatus(true);\n\n          this.ns.addNotification(`Operation is successful and ${this.systemType} entry is updated.`);\n\n          this.auth.logout();\n\n          this.entryChanges(result); } });\n  }\n\n  public entryChanges(data) : void {\n\n    this.entryChangesT = setTimeout(() => {\n\n      return this.router.navigateByUrl('/');  } , 15000) \n  }\n  \n  get new_password() : FormControl {\n\n  \t\treturn this.entryForm.get('new_password') as FormControl;\n  }\n\n  get confirm_password() : FormControl {\n\n  \t\treturn this.entryForm.get('confirm_password') as FormControl;\n  }\n\n  get isFormValid() : boolean {\n\n  \treturn this.entryForm.valid;\n  }\n\n  get notificationAvailable() : boolean {\n\n    return this.ns.notificationStatus();\n  }\n\n  get notificationMessage() : string {\n\n    return this.ns.getNotificationMessage();\n  }\n\n  public removeNotification() : void {\n\n     this.ns.removeNotification();\n   }\n\n}\n","<h2 *ngIf ='title'> {{title}} </h2>\n\n<app-notification-screen *ngIf ='notificationAvailable' [notified] ='notificationAvailable' [message] ='notificationMessage' (finished) ='removeNotification()'></app-notification-screen>\n\n<app-view-description *ngIf ='view' [view-type] ='view'> </app-view-description>\n\n<app-resource-unavailable *ngIf ='isError' [error] ='error' > </app-resource-unavailable>\n\n<div *ngIf ='passwordToken' id ='entry-update'>\n\n\t<ng-container *ngIf ='changesSuccess'>\n\n\t\t<p> <b class ='bold'> Note : </b> Your account have been successfully recovered and your password is changed. You will be redirected to the homepage in a short while and will be allowed \n\n\t\tto sign in again and use the system</p>\n\n\t</ng-container>\n\n\t<ng-container *ngIf ='changesSuccess'>\n\n<form *ngIf ='entryForm' method = 'post' autocomplete ='off' [formGroup] ='entryForm' (ngSubmit) ='$resetPassword(entryForm.value)' > \n\n\t\t<div *ngIf ='new_password' class ='form-group'>\n\n\t\t\t<label for ='new-password' class ='form-label bold'> New Password * </label>\n\n\t\t\t<input type ='password' class ='form-control' id ='new-password' name ='new_password' required ='required' autocomplete ='new-new_password' formControlName ='new_password'>\n\n<ng-container *ngIf ='new_password'>\n\n\t<div *ngIf ='new_password.invalid && (new_password.touched || new_password.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='new_password.errors?.required'> New Password of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='new_password.errors?.required || new_password.errors?.minlength'> New Password of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='new_password.errors?.required || new_password.errors?.maxlength'> New Password of {{systemType}} cannot be greater than 35 characters in length </li>\n\t\t\t<li *ngIf ='new_password.errors?.simplePassword'> New Password of {{systemType}} is too simple and will not be allowed in this system. Please input another type of new_password </li>\n\t\t\t<li *ngIf ='new_password.errors?.currentAndNew'> New Password of {{systemType}} should not be equal to initial password </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\t\t</div>\n\n\t\t<div *ngIf ='confirm_password' class ='form-group'>\n\n\t\t\t<label for ='confirm-password' class ='form-label bold'> Confirm Password * </label>\n\n\t\t\t<input type ='password' class ='form-control' id ='confirm-password' name ='confirm_password' required ='required' autocomplete ='new-confirm_password' formControlName ='confirm_password'>\n\n<ng-container *ngIf ='confirm_password'>\n\n\t<div *ngIf ='confirm_password.invalid && (confirm_password.touched || confirm_password.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='confirm_password.errors?.required'> Confirmation Password of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='confirm_password.errors?.required || confirm_password.errors?.minlength'> Confirmation Password of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.required || confirm_password.errors?.maxlength'> Confirmation Password of {{systemType}} cannot be greater than 35 characters in length </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.simplePassword'> Confirmation Password of {{systemType}} is too simple and will not be allowed in this system. Please input another type of confirm_password </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.confirm_password'> Confirmation Password of {{systemType}} should be equal to New password of {{systemType}} </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\t\t</div>\n\n\t\t\t<button *ngIf ='!isFormProcessing' type ='submit' class ='btn-submit' [class] ='{\"disabled\" : !isFormValid }' [disabled] ='!isFormValid' > Submit </button> \n\n\t\t\t<p *ngIf ='isFormSubmitted'> Your form is being processed. Please kindly be patient and wait while it completes. </p>\n\n\t</form>\n\n</ng-container>\n\n</div>"],"sourceRoot":"webpack:///"}