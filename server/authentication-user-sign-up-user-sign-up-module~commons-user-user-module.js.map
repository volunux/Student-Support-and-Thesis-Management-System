{"version":3,"sources":["./src/app/shared/services/password-validators.service.ts","./src/app/shared/user-account/user-account-form.service.ts","./src/app/shared/user-account/user-account.module.ts","./src/app/shared/directives/general-directives/lowercase.directive.ts","./src/app/shared/services/verify-username.service.ts","./src/app/shared/user-account/user-account-form-inputs/user-account-form-inputs.component.ts","./src/app/shared/user-account/user-account-form-inputs/user-account-form-inputs.component.html","./src/app/shared/directives/general-directives/general-directives.module.ts","./src/app/shared/services/verify-email.service.ts","./src/app/shared/interfaces/general.ts","./src/app/shared/services/dynamic-control-validator.ts","./src/app/shared/user-account/user-account-validator/user-account-validator.component.ts","./src/app/shared/user-account/user-account-validator/user-account-validator.component.html","./src/app/shared/directives/general-directives/capitalize.directive.ts"],"names":[],"mappings":"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","file":"authentication-user-sign-up-user-sign-up-module~commons-user-user-module.js","sourcesContent":["import { AbstractControl , FormGroup , ValidatorFn , ValidationErrors } from '@angular/forms';\n\nexport function simplePasswordValidator() : ValidatorFn {\n\n  return (control : AbstractControl) : ValidationErrors | null => {\n    \n    let passwordList = ['123456789' , '1234567890' , '12345' , 'abcdef'];\n\n    let entry = '' + control.value;\n\n    let passwordValid = passwordList.indexOf(entry);\n\n    return passwordValid > -1 ? {'simplePassword' : {'value' : control.value} } : null\n  \n  }\n\n}\n\nexport function confirmPasswordValidator() {\n\n return (group : FormGroup) : ValidationErrors | null => {\n\n    let password = group.get('new_password') ? group.get('new_password').value : null;\n\n    let cPassword = group.get('confirm_password') ? group.get('confirm_password') : null;\n\n    if (!password) password = group.get('password') ? group.get('password').value : null;\n\n    if (cPassword) { cPassword.value != password ? cPassword.setErrors({'confirm_password' : true , 'required' : true , 'minLength' : true , 'maxLength' : true}) : cPassword.setErrors(null); \n\n    return null;\n\n      }\n  \n  }\n\n}\n\n\nexport function currentAndNewPasswordValidator() {\n\n return (group : FormGroup) : ValidationErrors | null => {\n\n    let password = group.get('new_password') ? group.get('new_password').value : null;\n\n    let newPassword = group.get('new_password') ? group.get('new_password') : null;\n\n    if (!password) password = group.get('password') ? group.get('password').value : null;\n\n    if (newPassword) { newPassword.value == password ? newPassword.setErrors({'currentAndNew' : true , 'required' : true , 'minLength' : true , 'maxLength' : true}) : newPassword.setErrors(null); \n\n    return null;\n\n      }\n  \n  }\n\n}","import { Injectable , Inject } from '@angular/core';\r\nimport { AbstractControl , FormBuilder , FormControl , FormGroup , Validators , ValidatorFn } from '@angular/forms';\r\nimport { HttpClient , HttpHeaders } from '@angular/common/http';\r\nimport { AuthenticationService } from '../../authentication/authentication.service';\r\nimport { General , emailAddress , forbiddenNames } from '../interfaces/general';\r\nimport { Api , Api_Token } from '../../configuration';\r\nimport { searchValidator , forbiddenNamesValidator , emailAddressValidator , firstLastNames } from '../services/form-validators.service';\r\nimport { simplePasswordValidator , confirmPasswordValidator } from '../services/password-validators.service';\r\nimport { dynamicDataValidator } from '../services/dynamic-control-validator';\r\nimport { usernameVerification } from '../services/verify-username.service';\r\nimport { emailAddressVerification } from '../services/verify-email.service';\r\n\r\n@Injectable()\r\n\r\nexport class UserAccountFormService {\r\n\r\n  constructor(public auth : AuthenticationService , public fb : FormBuilder ,\r\n\r\n              public http : HttpClient , @Inject(Api_Token) public apiConfig : Api ) { \r\n\r\n  }\r\n\r\n\r\n  public permanentData : any = {};\r\n\r\n  public foreignValidator = [Validators.required , Validators.max(90000000)];\r\n\r\n  public permanentProps : General = {\r\n\r\n    'faculty' : this.foreignValidator ,\r\n\r\n    'department' : this.foreignValidator ,\r\n\r\n    'level' : this.foreignValidator ,\r\n\r\n    'unit' : this.foreignValidator ,\r\n\r\n    'country' : this.foreignValidator ,\r\n\r\n    'role' : this.foreignValidator ,\r\n\r\n    'status' : this.foreignValidator\r\n  };\r\n\r\n\r\n  public entryValidators : { [key : string] : ValidatorFn[] } = {\r\n\r\n    'first$last$Name' : [Validators.required , Validators.minLength(2) , Validators.maxLength(20)] ,\r\n\r\n    'jamb$matric$identity' : [Validators.minLength(2) , Validators.maxLength(30)] ,\r\n\r\n    'password' : [Validators.required , Validators.minLength(7) , Validators.maxLength(35) , simplePasswordValidator()] ,\r\n\r\n  }\r\n\r\n  public propAsyncValidator : General = {\r\n\r\n    'email_address' : [emailAddressVerification(this.auth , this.http , HttpHeaders , this.apiConfig).bind(this)] ,\r\n\r\n    'username' : [usernameVerification(this.auth , this.http , HttpHeaders , this.apiConfig).bind(this)]\r\n  }\r\n\r\n  public getPermanentProp(prop : string) : any {\r\n\r\n    return this.permanentProps[prop];\r\n  }\r\n\r\n  public createForm() : FormGroup {\r\n\r\n    return this.fb.group({\r\n\r\n      'first_name' : ['' , {'validators' : this.entryValidators.first$last$Name } ] ,\r\n\r\n      'last_name' : ['' , {'validators' : this.entryValidators.first$last$Name } ] ,\r\n\r\n      'username' : ['' , {'validators' : [...this.entryValidators.first$last$Name , forbiddenNamesValidator(forbiddenNames)] ,\r\n\r\n      'asyncValidators' : [usernameVerification(this.auth , this.http , HttpHeaders , this.apiConfig).bind(this)] , 'updateOn' : 'blur' } ] ,\r\n\r\n    'email_address' : ['' , {'validators' : \r\n\r\n      [Validators.required , Validators.minLength(7) , Validators.maxLength(50) , emailAddressValidator(emailAddress) ] ,\r\n\r\n      'asyncValidators' : [emailAddressVerification(this.auth , this.http , HttpHeaders , this.apiConfig).bind(this)]  , 'updateOn' : 'blur' } ] ,\r\n\r\n    'password' : ['' , {'validators' : this.entryValidators.password }  ] ,\r\n\r\n    'confirm_password' : ['' , {'validators' : this.entryValidators.password  }  ] ,\r\n\r\n      'about' : ['' , {'validators' : [Validators.required , Validators.minLength(9) , Validators.maxLength(300)] } ] ,\r\n\r\n      'faculty' : ['' , {'validators' : [...this.getPermanentProp('faculty')] } ] ,\r\n\r\n      'department' : ['' , {'validators' : [...this.getPermanentProp('department')] } ] ,\r\n\r\n      'level' : ['' , {'validators' : [...this.getPermanentProp('level')] } ] ,\r\n\r\n      'unit' : ['' , {'validators' : [...this.getPermanentProp('unit')] } ] ,\r\n\r\n      'country' : ['' , {'validators' : [...this.getPermanentProp('country')] } ] ,\r\n\r\n      'role' : ['' , {'validators' : [...this.getPermanentProp('role')] } ] ,\r\n\r\n      'status' : ['' , {'validators' : [...this.getPermanentProp('status')]}] ,\r\n\r\n      'matriculation_number' : ['' , {'validators' : this.entryValidators.jamb$matric$identity }] ,\r\n\r\n      'jamb_registration_number' : ['' , {'validators' : this.entryValidators.jamb$matric$identity }] ,\r\n\r\n      'identity_number' : ['' , {'validators' : this.entryValidators.jamb$matric$identity }] ,\r\n\r\n    } , { 'validator' : [confirmPasswordValidator() , firstLastNames() ] });\r\n\r\n  }\r\n\r\n  public entryForm : FormGroup = this.createForm();\r\n\r\n\r\n  get first_name() : FormControl {\r\n\r\n      return this.entryForm.get('first_name') as FormControl;\r\n  }\r\n\r\n  get last_name() : FormControl {\r\n\r\n      return this.entryForm.get('last_name') as FormControl;\r\n  }\r\n\r\n  get username() : FormControl {\r\n\r\n      return this.entryForm.get('username') as FormControl;\r\n  }\r\n\r\n  get email_address() : FormControl {\r\n\r\n      return this.entryForm.get('email_address') as FormControl;\r\n  }\r\n\r\n  get password() : FormControl {\r\n\r\n      return this.entryForm.get('password') as FormControl;\r\n  }\r\n\r\n  get confirm_password() : FormControl {\r\n\r\n      return this.entryForm.get('confirm_password') as FormControl;\r\n  }\r\n\r\n  get about() : FormControl {\r\n\r\n      return this.entryForm.get('about') as FormControl;\r\n  }\r\n\r\n  get department() : FormControl {\r\n\r\n      return this.entryForm.get('department') as FormControl;\r\n  }\r\n\r\n  get faculty() : FormControl {\r\n\r\n      return this.entryForm.get('faculty') as FormControl;\r\n  }\r\n\r\n  get level() : FormControl {\r\n\r\n      return this.entryForm.get('level') as FormControl;\r\n  }\r\n\r\n  get unit() : FormControl {\r\n\r\n      return this.entryForm.get('unit') as FormControl;\r\n  }\r\n\r\n  get country() : FormControl {\r\n\r\n    return this.entryForm.get('country') as FormControl;\r\n  }\r\n\r\n  get matriculation_number() : FormControl {\r\n\r\n      return this.entryForm.get('matriculation_number') as FormControl;\r\n  }\r\n\r\n  get jamb_registration_number() : FormControl {\r\n\r\n      return this.entryForm.get('jamb_registration_number') as FormControl;\r\n  }\r\n\r\n  get identity_number() : FormControl {\r\n\r\n    return this.entryForm.get('identity_number') as FormControl;\r\n  }\r\n\r\n  get role() : FormControl {\r\n\r\n      return this.entryForm.get('role') as FormControl;\r\n  }\r\n\r\n  get status() : FormControl {\r\n\r\n    return this.entryForm.get('status') as FormControl;\r\n  }\r\n\r\n  get isFormValid() : boolean {\r\n\r\n    return this.entryForm.valid;\r\n  }\r\n\r\n  public createPermanent(data : General) : void {\r\n\r\n    for (let $prop in data) {\r\n\r\n      let propVal = $prop.toLowerCase();\r\n\r\n      this.permanentData[propVal] = data[$prop];\r\n\r\n      this.entryForm.get(propVal) ? this.entryForm.get(propVal).setValidators([...this.permanentProps[propVal] , dynamicDataValidator(this.getMyData(propVal) , $prop)]) : null;\r\n\r\n      this.entryForm.get(propVal) ? this.entryForm.get(propVal).updateValueAndValidity() : null;\r\n    }\r\n\r\n    this.entryForm.updateValueAndValidity();\r\n\r\n  }\r\n\r\n\r\n  public removeControls(controls : string[]) : void {\r\n\r\n    controls.forEach((control) => { let ctrl = this.entryForm.get(control);\r\n\r\n      return ctrl ? this.entryForm.removeControl(control) : null; })\r\n\r\n  }\r\n\r\n  public removeAsyncValidators(controls : string[]) : void {\r\n\r\n    controls.forEach((control) => { \r\n\r\n      if (this.entryForm.get(control)) {\r\n\r\n        this.entryForm.get(control).clearAsyncValidators();\r\n\r\n        this.entryForm.get(control).updateValueAndValidity(); } });\r\n\r\n        this.entryForm.updateValueAndValidity();\r\n\r\n  }\r\n\r\n  public getMyData(prop : string) : string[] {\r\n\r\n    return this.permanentData[prop];\r\n\r\n  }\r\n\r\n  public setAsyncNullError(control : string , formCtrl : FormControl) : void {\r\n\r\n      formCtrl.setErrors({[control + 'Service'] : null} , {'emitEvent' : true});\r\n\r\n      formCtrl.updateValueAndValidity({'onlySelf' : true , 'emitEvent' : true});\r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { GeneralDirectivesModule } from '../directives/general-directives/general-directives.module';\n\nimport { UserAccountValidatorComponent } from './user-account-validator/user-account-validator.component';\nimport { UserAccountFormInputsComponent } from './user-account-form-inputs/user-account-form-inputs.component';\n\nimport { UserAccountFormService } from './user-account-form.service';\n\n@NgModule({\n\n  declarations: [\n\n    UserAccountValidatorComponent,\n    UserAccountFormInputsComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    GeneralDirectivesModule,\n    ReactiveFormsModule,\n  ],\n\n  providers : [\n    UserAccountFormService\n  ],\n  \n  exports : [\n\n    UserAccountValidatorComponent,\n    UserAccountFormInputsComponent\n  ]\n})\n\nexport class UserAccountModule { \n\n}\n","import { Directive , ElementRef , HostListener } from '@angular/core';\n\n@Directive({\n  \n  'selector' : '[appLowercase]'\n\n})\n\nexport class LowercaseDirective {\n\n  constructor(public el : ElementRef) { \n\n  }\n\n  @HostListener('input') public lowercase(field : string) : void { let i = 0;\n\n  \tlet $entry = this.el.nativeElement.value.replace(/\\s+/g , '').toLowerCase();\n\n  \tthis.el.nativeElement.value = $entry;\n\n  }\n\n  ngOnInit() {\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable , of } from 'rxjs';\nimport { General } from '../interfaces/general';\nimport { catchError , filter , first , map , switchMap , delay , tap , take , debounceTime , distinctUntilChanged } from 'rxjs/operators';\nimport { AsyncValidator , AsyncValidatorFn , AbstractControl , ValidationErrors } from '@angular/forms'\n\n\nexport function usernameVerification(authService , http , httpHeaders , apiConfig) : AsyncValidatorFn {\n\n   return (control : AbstractControl) : Promise<ValidationErrors | null> | Observable<ValidationErrors | null> =>  {\n\n     if (!control.dirty) return of(null);\n\n    let entry = control.value;\n\n    let link = `${apiConfig.host}/confirm/username/${entry}`;\n\n    let $result = {'UsernameService' : {'value' : control.value } }; \n\n    let lastUsername = null;\n\n       return control.valueChanges.pipe(\n\n          filter((username) => { return username != lastUsername }) ,\n\n          take(1) ,\n\n          delay(3000) ,\n\n          switchMap((username) => { lastUsername = username;\n\n            return http.get(link); }) ,\n\n          map((username : General) => { return username.isAvailable ? null : $result } ) ,\n\n          first() ,\n\n          catchError((error) => { return of($result);  })\n                \n          )\n  }\n\n}","import { Component , Input , OnInit } from '@angular/core';\r\nimport { FormControl , FormGroup } from '@angular/forms';\r\nimport { General } from '../../interfaces/general';\r\nimport { User } from '../../interfaces/user';\r\n\r\n@Component({\r\n\r\n  'selector' : 'app-user-account-form-inputs',\r\n\r\n  'templateUrl' : './user-account-form-inputs.component.html',\r\n\r\n  'styleUrls' : ['./user-account-form-inputs.component.css']\r\n\r\n})\r\n\r\nexport class UserAccountFormInputsComponent implements OnInit {\r\n\r\n  constructor() { \r\n\r\n  }\r\n\r\n  ngOnInit() : void {\r\n\r\n    console.log(this.generalOthers);\r\n \r\n\r\n   console.log(this.entryForm); \r\n  }\r\n\r\n  @Input('system-type') public systemType : string;\r\n\r\n  @Input('entry-form') public entryForm : FormGroup;\r\n\r\n  @Input() public entry : User;\r\n\r\n  @Input('general-others') public generalOthers : General;\r\n\r\n  @Input('no-edit') public noEdit : boolean;\r\n\r\n  get first_name() : FormControl {\r\n\r\n    return this.entryForm.get('first_name') as FormControl;\r\n  }\r\n\r\n  get last_name() : FormControl {\r\n\r\n    return this.entryForm.get('last_name') as FormControl;\r\n  }\r\n\r\n  get username() : FormControl {\r\n\r\n    return this.entryForm.get('username') as FormControl;\r\n  }\r\n\r\n  get email_address() : FormControl {\r\n\r\n    return this.entryForm.get('email_address') as FormControl\r\n  }\r\n\r\n  get password() : FormControl {\r\n\r\n    return this.entryForm.get('password') as FormControl;\r\n  } \r\n\r\n  get confirm_password() : FormControl {\r\n\r\n    return this.entryForm.get('confirm_password') as FormControl;\r\n  }\r\n\r\n  get about() : FormControl {\r\n\r\n    return this.entryForm.get('about') as FormControl;\r\n  }\r\n\r\n  get faculty() : FormControl {\r\n\r\n    return this.entryForm.get('faculty') as FormControl;\r\n  }\r\n\r\n  get department() : FormControl {\r\n\r\n    return this.entryForm.get('department') as FormControl;\r\n  }\r\n\r\n  get level() : FormControl {\r\n\r\n    return this.entryForm.get('level') as FormControl;\r\n  }\r\n\r\n  get country() : FormControl {\r\n\r\n    return this.entryForm.get('country') as FormControl;\r\n  }\r\n\r\n  get matriculation_number() : FormControl {\r\n\r\n    return this.entryForm.get('matriculation_number') as FormControl;\r\n  }\r\n\r\n  get jamb_registration_number() : FormControl {\r\n\r\n    return this.entryForm.get('jamb_registration_number') as FormControl;\r\n  }\r\n\r\n  get identity_number() : FormControl {\r\n\r\n    return this.entryForm.get('identity_number') as FormControl;\r\n  }\r\n\r\n  get unit() : FormControl {\r\n\r\n    return this.entryForm.get('unit') as FormControl;\r\n  }\r\n\r\n  get status() : FormControl {\r\n\r\n    return this.entryForm.get('status') as FormControl;\r\n  }\r\n\r\n  get role() : FormControl {\r\n\r\n    return this.entryForm.get('role') as FormControl;\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf ='entryForm'>\r\n\r\n<div class ='' [formGroup] ='entryForm'>\r\n\r\n\t<ng-container *ngIf ='first_name'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='first_name' class ='form-label bold'> First Name * : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='first_name' name ='first_name' placeholder ='Yusuf' required ='required' autocomplete ='new-first_name' formControlName ='first_name' class ='form-control' \r\n\r\n\t\t\t\t[readOnly] ='noEdit' appCapitalize ='appCapitalize'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='first_name' [system-type] ='systemType' [first-name] ='first_name'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='last_name'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='last_name' class ='form-label bold'> Last Name * : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='last_name' name ='last_name' placeholder ='Musa' required ='required' autocomplete ='new-last_name' formControlName ='last_name' class ='form-control'\r\n\r\n\t\t\t\t[readOnly] ='noEdit' appCapitalize ='appCapitalize'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='last_name' [system-type] ='systemType' [last-name] ='last_name'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='username'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='username' class ='form-label bold'> Username * : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='username' name ='username' placeholder ='adigun' required ='required' autocomplete ='new-username' formControlName ='username' class ='form-control' \r\n\r\n\t\t\t\t[readOnly] ='noEdit' appLowercase ='appLowercase'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='username' [system-type] ='systemType' [user-name] ='username'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='email_address'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='email_address' class ='form-label bold'> Email Address * : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='email_address' name ='email_address' placeholder ='david@example.com' required ='required' autocomplete ='new-email_address' formControlName ='email_address' \r\n\r\n\t\t\t\tclass ='form-control' [readOnly] ='noEdit' appLowercase ='appLowercase'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='email_address' [system-type] ='systemType' [email-address] ='email_address'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='password'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='password' class ='form-label bold'> Password * : </label>\r\n\r\n\t\t\t\t<input type ='password' id ='password' name ='password' placeholder ='*******************' required ='required' autocomplete ='new-password' formControlName ='password'\r\n\r\n\t\t\t\t[readOnly] ='noEdit' class ='form-control'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='password' [system-type] ='systemType' [password] ='password'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='confirm_password'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='confirm_password' class ='form-label bold'> Confirmation Password * : </label>\r\n\r\n\t\t\t\t<input type ='password' id ='confirm_password' name ='confirm_password' placeholder ='*******************' required ='required' autocomplete ='new-confirm_password'\r\n\r\n\t\t\t\tformControlName ='confirm_password' [readOnly] ='noEdit' class ='form-control'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='confirm_password' [system-type] ='systemType' [confirm-password] ='confirm_password'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='about'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='about' class ='form-label bold'> About * : </label>\r\n\r\n\t\t\t\t<textarea id ='about' name ='about' placeholder ='I am Me' required ='required' formControlName ='about' class ='form-control form-textarea' [readOnly] ='noEdit' ></textarea>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='about' [system-type] ='systemType' [about] ='about'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\t<ng-container *ngIf ='faculty && generalOthers && generalOthers?.faculty && generalOthers?.faculty?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='faculty' class ='form-label bold'> Faculty * : </label>\r\n\r\n\t\t\t\t<select name ='faculty' id ='faculty' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='faculty'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let faculty of generalOthers?.faculty' [value] ='faculty._id'> {{faculty.name}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='faculty' [system-type] ='systemType' [faculty] ='faculty'></app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\r\n\t\t\t<ng-container *ngIf ='department && generalOthers && generalOthers?.department && generalOthers?.department?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='department' class ='form-label bold'> Department * : </label>\r\n\r\n\t\t\t\t<select name ='department' id ='department' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='department'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let department of generalOthers?.department' [value] ='department._id'> {{department.name}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='department' [system-type] ='systemType' [department] ='department'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\r\n\t\t\t<ng-container *ngIf ='level && generalOthers && generalOthers?.level && generalOthers?.level?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='level' class ='form-label bold'> Level * : </label>\r\n\r\n\t\t\t\t<select name ='level' id ='level' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='level'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let level of generalOthers?.level' [value] ='level._id'> {{level.name}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='level' [system-type] ='systemType' [level] ='level'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\r\n\t\t\t<ng-container *ngIf ='country && generalOthers && generalOthers?.country && generalOthers?.country?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='country' class ='form-label bold'> Country * : </label>\r\n\r\n\t\t\t\t<select name ='country' id ='country' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='country'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let country of generalOthers?.country' [value] ='country._id'> {{country.name}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='country' [system-type] ='systemType' [country] ='country'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\t<ng-container *ngIf ='unit && generalOthers && generalOthers?.unit && generalOthers?.unit?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='unit' class ='form-label bold'> Unit * : </label>\r\n\r\n\t\t\t\t<select name ='unit' id ='unit' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='unit'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let unit of generalOthers?.unit' [value] ='unit._id'> {{unit.name}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='unit' [system-type] ='systemType' [unit] ='unit'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\t<ng-container *ngIf ='role && generalOthers && generalOthers?.role && generalOthers?.role?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='role' class ='form-label bold'> Role * : </label>\r\n\r\n\t\t\t\t<select name ='role' id ='role' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='role'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let role of generalOthers?.role' [value] ='role._id'> {{role.word}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='role' [system-type] ='systemType' [role] ='role'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\t<ng-container *ngIf ='status && generalOthers && generalOthers?.status && generalOthers?.status?.length > 0'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='status' class ='form-label bold'> Status * : </label>\r\n\r\n\t\t\t\t<select name ='status' id ='status' class ='form-control' required ='required' [readOnly] ='noEdit' formControlName ='status'>\r\n\r\n\t\t\t\t\t<option [value] =''> </option> \r\n\r\n\t\t\t\t\t<option *ngFor ='let status of generalOthers?.status' [value] ='status._id'> {{status.word}} </option> \r\n\r\n\t\t\t\t</select>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='status' [system-type] ='systemType' [status] ='status'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t\t\t<ng-container *ngIf ='matriculation_number'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='matriculation_number' class ='form-label bold'> Matriculation Number : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='matriculation_number' name ='matriculation_number' placeholder ='2015/1/57261CI' autocomplete ='new-matriculation_number' formControlName ='matriculation_number' \r\n\r\n\t\t\t\t[readOnly] ='noEdit' class ='form-control'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='matriculation_number' [system-type] ='systemType' [matriculation-number] ='matriculation_number'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='jamb_registration_number'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='jamb_registration_number' class ='form-label bold'> Jamb Registration Number : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='jamb_registration_number' name ='jamb_registration_number' placeholder ='56223645DH' autocomplete ='new-jamb_registration_number'\r\n\r\n\t\t\t\tformControlName ='jamb_registration_number' [readOnly] ='noEdit' class ='form-control'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='jamb_registration_number' [system-type] ='systemType' [jamb-registration-number] ='jamb_registration_number'></app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t<ng-container *ngIf ='identity_number'>\r\n\r\n\t\t\t<div class ='form-group'>\r\n\r\n\t\t\t\t<label for ='identity_number' class ='form-label bold'> Identity Number : </label>\r\n\r\n\t\t\t\t<input type ='text' id ='identity_number' name ='identity_number' placeholder ='M1503186' autocomplete ='new-identity_number' formControlName ='identity_number' [readOnly] ='noEdit' class ='form-control'>\r\n\r\n\t\t\t\t<app-user-account-validator *ngIf ='identity_number' [system-type] ='systemType' [identity-number] ='identity_number'> </app-user-account-validator>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</ng-container>\r\n\r\n\t\t</div>\r\n\r\n\t</ng-container>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LowercaseDirective } from './lowercase.directive';\nimport { CapitalizeDirective } from './capitalize.directive';\n\n\n@NgModule({\n  declarations: [\n\n  \tLowercaseDirective,\n  \tCapitalizeDirective\n  ],\n\n\n  imports: [\n    \n    CommonModule\n  ],\n\n  exports : [\n\n  \tLowercaseDirective,\n  \tCapitalizeDirective\n  ]\n\n})\n\nexport class GeneralDirectivesModule { \n\n}\n","import { Injectable , Inject } from '@angular/core';\r\nimport { Api , Api_Token } from '../../configuration';\r\nimport { General } from '../interfaces/general';\r\nimport { Observable , of } from 'rxjs';\r\nimport { catchError , filter , first , map , switchMap , delay , tap , take , debounceTime , distinctUntilChanged } from 'rxjs/operators';\r\nimport { AsyncValidator , AsyncValidatorFn , AbstractControl , ValidationErrors } from '@angular/forms'\r\nimport { HttpClient , HttpHeaders } from '@angular/common/http';\r\nimport { AuthenticationService } from '../../authentication/authentication.service';\r\n\r\n\r\nexport function emailAddressVerification(authenticationService , http , httpHeaders , apiConfig) : AsyncValidatorFn {\r\n\r\n   return (control : AbstractControl) : Promise<ValidationErrors | null> | Observable<ValidationErrors | null> =>  {\r\n\r\n     if (!control.dirty) return of(null);\r\n\r\n    let entry = control.value;\r\n\r\n    let link = `${apiConfig.host}/confirm/emailaddress/${entry}`;\r\n\r\n    let $result = {'EmailAddressService' : {'value' : control.value } }\r\n\r\n    let lastEmailAddress = null;\r\n\r\n       return control.valueChanges.pipe(\r\n\r\n          filter((emailAddress) => { return emailAddress != lastEmailAddress }) ,\r\n\r\n          take(1) ,\r\n\r\n          delay(3000) ,\r\n\r\n          switchMap((emailAddress) => { lastEmailAddress = emailAddress;\r\n\r\n           return http.get(link); }) ,\r\n\r\n          map((emailAddress : General) => { return emailAddress.isAvailable ? null : $result } ) ,\r\n\r\n          first() ,\r\n\r\n          catchError((error) => { return of($result); })\r\n                \r\n          )\r\n     }\r\n\r\n}","export interface General {\n\n\t[key : string] : any;\n\n}\n\n\n\nexport const forbiddenNames : RegExp = /moderator|administrator|superAdministrator|hod|deanstudent|departmentPresident|facultyPresident|bursar|lecturer|staff/i;\n\nexport const emailAddress : RegExp = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;","import { ValidatorFn , AbstractControl , ValidationErrors } from '@angular/forms';\r\n\r\n\r\nexport function dynamicDataValidator(entries , name) : ValidatorFn {\r\n\r\n\treturn (control : AbstractControl) : ValidationErrors | null => {\r\n\r\n    let entry = control.value;\r\n\r\n    let data = entries.map((item) => item._id);\r\n\r\n    if (typeof data[0] == 'number') { entry = +entry; }\r\n\r\n  \treturn entry != '' && data.indexOf(entry) < 0 ? {[name] : {'value' : entry , 'name' : name} } : null;\r\n\t\r\n\t}\r\n\r\n}","import { Component , OnInit , Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { fadeAnimation } from '../../../animations';\n\n@Component({\n\n  'selector' : 'app-user-account-validator',\n\n  'templateUrl' : './user-account-validator.component.html',\n\n  'styleUrls' : ['./user-account-validator.component.css'] ,\n\n  'animations' : [fadeAnimation]\n\n})\n\nexport class UserAccountValidatorComponent implements OnInit {\n\n  constructor() { \n\n  }\n\n  ngOnInit(): void {\n  \n  }\n\n  @Input('system-type') public systemType : string;\n\n  @Input('first-name') public first_name : FormControl;\n\n  @Input('last-name') public last_name : FormControl;\n\n  @Input('user-name') public username : FormControl;\n\n  @Input('email-address') public email_address : FormControl;\n\n  @Input() public about : FormControl;\n\n  @Input() public faculty : FormControl;\n\n  @Input() public department : FormControl;\n\n  @Input() public level : FormControl;\n\n  @Input() public unit : FormControl;\n\n  @Input() public country : FormControl;\n\n  @Input() public role : FormControl;\n\n  @Input() public status : FormControl;\n\n  @Input('matriculation-number') public matriculation_number : FormControl;\n\n  @Input('identity-number') public identity_number : FormControl;\n\n  @Input('jamb-registration-number') public jamb_registration_number : FormControl;\n\n  @Input() public password : FormControl;\n\n  @Input('confirm-password') public confirm_password : FormControl;\n\n  @Input('no-edit') public noEdit : boolean;\n\n\n}\n","\n\n<ng-container *ngIf ='first_name'>\n\n\t<div @fadeAnimation *ngIf ='first_name.invalid && (first_name.touched || first_name.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='first_name.errors?.required'> First Name of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='first_name.errors?.required || first_name.errors?.minlength'> First Name of {{systemType}} cannot be less than 2 characters in length </li>\n\t\t\t<li *ngIf ='first_name.errors?.required || first_name.errors?.maxlength'> First Name of {{systemType}} cannot be greater than 20 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='last_name'>\n\n\t<div @fadeAnimation *ngIf ='last_name.invalid && (last_name.touched || last_name.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='last_name.errors?.required'> Last Name of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='last_name.errors?.required || last_name.errors?.minlength'> Last Name of {{systemType}} cannot be less than 2 characters in length </li>\n\t\t\t<li *ngIf ='last_name.errors?.required || last_name.errors?.maxlength'> Last Name of {{systemType}} cannot be greater than 20 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='username'>\n\n\t<div @fadeAnimation *ngIf ='username.invalid && (username.touched || username.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='username.errors?.required'> {{systemType}} name of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='username.errors?.required || username.errors?.minlength'> {{systemType}} name of {{systemType}} cannot be less than 3 characters in length </li>\n\t\t\t<li *ngIf ='username.errors?.required || username.errors?.maxlength'> {{systemType}} name of {{systemType}} cannot be greater than 20 characters in length </li>\n\n\t\t\t<li *ngIf ='username.errors?.forbiddenNames'> {{systemType}} name of {{systemType}} cannot be either of the followings \n\n\t\t\t\t<ng-container *ngIf ='username.errors?.forbiddenNames?.names'>  \n\n\t\t\t\t\t<ng-container *ngFor ='let name of username.errors.forbiddenNames.names , let lss = last'>\n\n\t\t\t\t\t\t{{name}} <ng-container *ngIf ='!lss else iAmLast'> or </ng-container> \n\n\t\t\t\t\t\t<ng-template #iAmLast> . </ng-template>\n\n\t\t\t\t</ng-container>\n\n\t\t\t\t</ng-container>\n\n\t\t\t\t</li>\n\n\t\t\t<li *ngIf ='username.errors?.UsernameService'> {{systemType}} name cannot be used at the moment because it is already taken by another user. Please input another username </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='password'>\n\n\t<div @fadeAnimation *ngIf ='password.invalid && (password.touched || password.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='password.errors?.required'> Password of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='password.errors?.required || password.errors?.minlength'> Password of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='password.errors?.required || password.errors?.maxlength'> Password of {{systemType}} cannot be greater than 35 characters in length </li>\n\t\t\t<li *ngIf ='password.errors?.simplePassword'> Password of {{systemType}} is too simple and will not be allowed in this system. Please input another type of password </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='confirm_password'>\n\n\t<div @fadeAnimation *ngIf ='confirm_password.invalid && (confirm_password.touched || confirm_password.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='confirm_password.errors?.required'> Confirmation Password of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='confirm_password.errors?.minlength'> Confirmation Password of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.maxlength'> Confirmation Password of {{systemType}} cannot be greater than 35 characters in length </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.simplePassword'> Confirmation Password of {{systemType}} is too simple and will not be allowed in this system. Please input another type of confirm_password </li>\n\t\t\t<li *ngIf ='confirm_password.errors?.confirm_password'> Confirmation Password of {{systemType}} should be equal to initial password </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='about'>\n\n\t<div @fadeAnimation *ngIf ='about.invalid && (about.touched || about.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='about.errors?.required'> About {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='about.errors?.required || about.errors?.minlength'> About {{systemType}} cannot be less than 9 characters in length </li>\n\t\t\t<li *ngIf ='about.errors?.required || about.errors?.maxlength'> About {{systemType}} cannot be greater than 300 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='email_address'>\n\n\t<div @fadeAnimation *ngIf ='email_address.invalid && (email_address.touched || email_address.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='email_address.errors?.required'> Email Address of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.minlength'> Email Address of {{systemType}} cannot be less than 7 characters in length </li>\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.maxlength'> Email Address of {{systemType}} cannot be greater than 50 characters in length </li>\n\t\t\t<li *ngIf ='email_address.errors?.required || email_address.errors?.email_address'> Email Address must be valid and should conform to standards for example david@gmail.com </li>\n\t\t\t<li *ngIf ='email_address.errors?.EmailAddressService'> Email Address cannot be used at the moment because it is already taken by another user. Please input another email address </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='department'>\n\n\t<div @fadeAnimation *ngIf ='department.invalid && (department.touched || department.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='department.errors?.required'> Department of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='department.errors?.max'> Department of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='department.errors?.Department'> Department of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='faculty'>\n\n\t<div @fadeAnimation *ngIf ='faculty.invalid && (faculty.touched || faculty.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='faculty.errors?.required'> Faculty of {{systemType}} should be provided and cannot be empty </li>\n\t\t\t<li *ngIf ='faculty.errors?.max'> Faculty of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='faculty.errors?.Faculty'> Faculty of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='country'>\n\n\t<div @fadeAnimation *ngIf ='country.invalid && (country.touched || country.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='country.errors?.required'> Country of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='country.errors?.max'> Country of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='country.errors?.Country'> Country of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='level'>\n\n\t<div @fadeAnimation *ngIf ='level.invalid && (level.touched || level.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='level.errors?.required'> Level of {{systemType}} should be provided and cannot be empty </li>\n\t\t\t<li *ngIf ='level.errors?.max'> Level of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='level.errors?.Level'> Level of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='unit'>\n\n\t<div @fadeAnimation *ngIf ='unit.invalid && (unit.touched || unit.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='unit.errors?.required'> Unit of {{systemType}} should be provided and cannot be empty </li>\n\t\t\t<li *ngIf ='unit.errors?.max'> Unit of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='unit.errors?.Unit'> Unit of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='matriculation_number'>\n\n\t<div @fadeAnimation *ngIf ='matriculation_number.invalid && (matriculation_number.touched || matriculation_number.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='matriculation_number.errors?.required || matriculation_number.errors?.minlength'> Matriculation Number of {{systemType}} cannot be less than 2 characters in length </li>\n\t\t\t<li *ngIf ='matriculation_number.errors?.required || matriculation_number.errors?.maxlength'> Matriculation Number of {{systemType}} cannot be greater than 30 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='jamb_registration_number'>\n\n\t<div @fadeAnimation *ngIf ='jamb_registration_number.invalid && (jamb_registration_number.touched || jamb_registration_number.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='jamb_registration_number.errors?.required || jamb_registration_number.errors?.minlength'> Jamb Registration Number of {{systemType}} cannot be less than 2 characters in length </li>\n\t\t\t<li *ngIf ='jamb_registration_number.errors?.required || jamb_registration_number.errors?.maxlength'> Jamb Registration Number of {{systemType}} cannot be greater than 30 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n\n<ng-container *ngIf ='identity_number'>\n\n\t<div @fadeAnimation *ngIf ='identity_number.invalid && (identity_number.touched || identity_number.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='identity_number.errors?.required || identity_number.errors?.minlength'> Identity Number of {{systemType}} cannot be less than 2 characters in length </li>\n\t\t\t<li *ngIf ='identity_number.errors?.required || identity_number.errors?.maxlength'> Identity Number of {{systemType}} cannot be greater than 30 characters in length </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='role'>\n\n\t<div @fadeAnimation *ngIf ='role.invalid && (role.touched || role.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='role.errors?.required'> Role of {{systemType}} should be provided and cannot be empty </li>\t\n\t\t\t<li *ngIf ='role.errors?.max'> Role of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='role.errors?.Role'> Role of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>\n\n<ng-container *ngIf ='status'>\n\n\t<div @fadeAnimation *ngIf ='status.invalid && (status.touched || status.dirty)' class ='validation-error'>\n\n\t\t<ul>\n\n\t\t\t<li *ngIf ='status.errors?.required'> Status of {{systemType}} should be provided and cannot be empty </li>\t\t\t\n\t\t\t<li *ngIf ='status.errors?.max'> Status of {{systemType}} cannot be greater than specified length </li>\n\t\t\t<li *ngIf ='status.errors?.Status'> Status of {{systemType}} should be available from existing record before it can be considered valid </li>\n\n\t\t</ul>\n\n\t</div>\n\n</ng-container>","import { Directive , ElementRef , HostListener } from '@angular/core';\n\n@Directive({\n\n  'selector' : '[appCapitalize]'\n\n})\n\nexport class CapitalizeDirective {\n\n  constructor(public el : ElementRef) { \n\n  }\n\n  @HostListener('input') public capitalize(field : string) : void { let i = 0;\n\n  \tlet $entry = this.el.nativeElement.value.replace(/\\s+/g , ' ').split(' ')\n\n\t\t\t\t\t\t\t.map((n) => {\treturn n.charAt(0).toUpperCase() + n.substring(1).toLowerCase();\t}).join(' ');\n\n  \tthis.el.nativeElement.value = $entry;\n\n  }\n\n  ngOnInit() {\n\n  }\n\n}\n"],"sourceRoot":"webpack:///"}